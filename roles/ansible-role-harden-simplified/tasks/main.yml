
- name: Upgrade packages (Debian)
  apt:
    update_cache: true
    cache_valid_time: 3600
    upgrade: safe
  when: ansible_os_family == 'Debian'

- name: Upgrade packages (RedHat)
  yum:
    name: '*'
    state: latest
    update_cache: yes
  when: ansible_os_family == 'RedHat'

- name: Install required packages
  package:
    name: "{{ item }}"
    state: present
  ignore_errors: true
  loop: "{{ harden_linux_required_packages }}"

- name: Ensure UFW is present
  package:
    name: ufw
    state: present
  when: ansible_os_family == 'Debian'

- name: Install open-vm-tools
  package:
    name: open-vm-tools
    state: present
  when: ansible_virtualization_type == "VMware"

- name: Set SELinux permissive
  lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: SELINUX=permissive
  when: ansible_os_family == 'RedHat'

- name: Set SELinux permissive
  command: 'setenforce 0'
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Add deploy user
  user:
    name: "{{ harden_linux_deploy_user_name }}"
    password: "{{ harden_linux_deploy_user_password }}"
    uid: "{{ harden_linux_deploy_user_uid }}"
    shell: "{{ harden_linux_deploy_user_shell }}"
    groups: "{{ 'wheel' if ( ansible_os_family == 'RedHat' or ansible_os_family == 'Sangoma') else 'sudo' if ansible_os_family == 'Debian'}}"

- name: Add authorized keys for deploy user
  authorized_key:
    user: "{{ harden_linux_deploy_user_name }}"
    key: "{{ harden_linux_deploy_user_sshkey }}"

- name: Ensure sshd_config setting
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    regexp: "{{ item }}"
    line: "{{ harden_linux_sshd_settings[item] }}"
    state: "present"
  loop: "{{ harden_linux_sshd_settings | list }}"

- name: Sysctl settings
  sysctl:
    name: "{{ item }}"
    value: "{{ harden_linux_sysctl_settings[item] }}"
    sysctl_set: yes
  loop: "{{ harden_linux_sysctl_settings | list }}"
  tags:
    - sysctl

- name: UFW - Configure defaults
  lineinfile:
    dest: /etc/default/ufw
    regexp: "{{ item }}"
    line: "{{ harden_linux_ufw_defaults[item] }}"
    state: present
  loop: "{{ harden_linux_ufw_defaults | list }}"
  when: ansible_os_family == 'Debian'

- name: UFW - Apply firewall rules
  ufw:
    rule: "{{ item.rule }}"
    interface: "{{ item.interface | default('') }}"
    direction: "{{ item.direction | default('in') }}"
    from_ip: "{{ item.from_ip | default('any') }}"
    to_ip: "{{ item.to_ip | default('any') }}"
    from_port: "{{ item.from_port | default('') }}"
    to_port: "{{ item.to_port | default('') }}"
    protocol: "{{ item.protocol | default('any') }}"
    log: "{{ item.log | default(False) }}"
  loop: "{{ harden_linux_ufw_rules }}"
  when: ansible_os_family == 'Debian'

- name: UFW - Setup logging
  ufw:
    state: enabled
    logging: "{{ harden_linux_ufw_logging }}"
  when: ansible_os_family == 'Debian'

- name: Ensure the locale exists
  command: "localedef -f UTF-8 -i en_DK en_DK.UTF-8"
  ignore_errors: true

- name: Set en_DK.UTF-8 as default locale
  command: localectl set-locale LANG=en_DK.UTF-8 LC_CTYPE=en_DK.UTF-8
  ignore_errors: true

- name: Check SSHGuard whitelist exist
  stat:
    path: /etc/sshguard/whitelist
  register: stat_result

- name: Update Sshguard white list
  lineinfile:
    dest: /etc/sshguard/whitelist
    regexp: "^{{ item }}"
    line: "{{ item }}"
    state: present
  loop: "{{ harden_linux_sshguard_whitelist }}"
  when: stat_result.stat.exists

- name: Restart services
  service:
    name: "{{ item }}"
    state: restarted
    enabled: true
  loop:
    - sshd
    - sshguard
    - ufw
  ignore_errors: true

- name: Delete root pw file /root/.pw (if present)
  file:
    path: /root/.pw
    state: absent

- name: Change root password
  user:
    name: "root"
    password: "!"
